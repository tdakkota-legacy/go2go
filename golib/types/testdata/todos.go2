// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file is meant as "dumping ground" for tests
// of not yet implemented features. It will grow and
// shrink over time.

package p

// Pointer designation for type parameters is not yet supported.
contract _C(T) {
	* /* ERROR not yet supported */ T m()
}

// Indexing on generic types containing type parameters in their type list
// is not yet supported.
func _(type T interface { type T })(x T) {
        _ = x /* ERROR type parameter */ /* ERROR cannot index */ [0]
}

// Indexing a generic type with an array type bound should check length.
// (Example by mdempsky@.)
func _(type T interface { type [10]int })(x T) {
	_ = x[20] // this should report a compile-time error
}

// Channel sends and receives on generic types is not yet supported.
func _(type T interface{ type chan int })(ch T) {
	ch <- /* ERROR cannot send */ 0
	_ = <- ch /* ERROR cannot receive */
}

// Pointer indirection of generic types is not yet supported.
func _(type T interface{ type *int })(p T) {
	_ = *p /* ERROR cannot indirect */
}

// Calling of a generic variable is not yet supported.
func _(type T interface{ type func() })(f T) {
	f /* ERROR cannot call */ ()
	go f /* ERROR cannot call */ ()
}

// Need to investigate the exact nature of a generic type (is it a named type)?
func _(type T interface{ type int})(x T) {
	type myint int
	var _ int = x /* ERROR cannot use */
	var _ T = 42
	var _ T = int /* ERROR cannot use */ (42)
	var _ T = myint /* ERROR cannot use */ (42)
}

// Composite literals that require parentheses around their types.
// Should investigate if it makes sense to be smarter when parsing
// at the cost of more complex rules.
type T1(type P) struct{}
type T2(type P, Q) struct{}

func _() {
   _ = []T1 /* ERROR instantiation */ (int){} // this doesn't work
   _ = [](T1(int)){}                          // this works
   _ = [](T2(int, string)){}                  // T2(int, float) cannot be a conversion - should not need ()'s
}
