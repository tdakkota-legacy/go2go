// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

// empty contracts
contract _(){}
contract _(A){}
contract _(A, B, C){}
contract _(A, B, A /* ERROR A redeclared */ ){}

// method constraints
contract _(A) { A } /* ERROR expected type */ // TODO(gri) investigate this error! looks wrong
contract _(A) { A m(); A add(A) int }
contract _(A) { B /* ERROR B is not a type parameter declared by the contract */ m() }
contract _(A) { A m(); A m /* ERROR duplicate method */ () }
contract _(A) {
        A m()
        A m /* ERROR duplicate method */ () int
}
contract _(A, B) {
        A m(x int) B
        B m(x int) A
        A m /* ERROR duplicate method */ (x int) B
        B m /* ERROR duplicate method */ (x int) B
}

contract _(A) {
        A m1(), m2 /* ERROR cannot have more than one method */ ()
        A m3(), int /* ERROR cannot mix types and methods */
        A int, float32, m4(), string /* ERROR cannot mix types and methods */
}

// type constraints
// Types may be declared multiple times.
// TODO(gri) The "correct" way of doing this is perhaps to allow multiple declarations
// only when they appear though embedding (where they are harder to avoid), but not in general.
contract _(A) { A A }
contract _(A) { A B /* ERROR undeclared name: B */ }
contract _(A) { A int }
contract _(A) { A []int }
contract _(A) { A []B /* ERROR undeclared name: B */ }
contract C(A) { A C /* ERROR use of contract */ }
contract _(A) { A struct { f int } }
contract _(A, B) { A B }

// contract use in wrong places
const _ E /* ERROR use of contract */ = 0
type _ E /* ERROR use of contract */
var _ E /* ERROR use of contract */
var _ = E /* ERROR use of contract */
contract E() {}

// --------------------------------------------------------------------------------------
// embedded contracts

contract E0() {}
contract _() {
        E0()
}

contract E1 /* ERROR cycle */ () {
        E1()
}

contract E2 /* ERROR cycle */ (a, b, c) {
        E2(a, b) // no further errors here because of incorrect parameter count
}

contract _(T) {
        E3 /* ERROR 0 type parameters */ ()
        E3(T, int /* ERROR int is not a type parameter */)
        E3(T, T /* ERROR used multiple times */ )
}

contract E3(A, B) {
        A a()
        B b()
}

// E4 expects the methods T.a and T.b
contract E4(T) {
        E3(T, T /* ERROR used multiple times */ )
}

func f(type T E4)()

func _() {
        //f(myTa /* ERROR missing method */)() // TODO(gri) check that we're doing the right thing here
        f(myTab)()
}

type myTa struct{}

func (myTa) a()

type myTab struct{ myTa }

func (myTab) b()

contract E5(T) {
        T int
}

contract E6(T) {
        E5(T)
        E5(T)
}

func _(type T E6)(x T) T {
        return x + 1
}

// --------------------------------------------------------------------------------------
// Contract satisfaction

// Type parameter type must be a contract.
type _(type T int /* ERROR not an interface or contract */ ) struct{}

// The number of type parameters must match the number of contract parameters.
contract C0() {}

type _(type A C0 /* ERROR 1 type parameters */ ) struct{}

contract C2(A, B) {
        A a()
}

type _(type A C2 /* ERROR 1 type parameters */ ) struct{}
type _(type A, B C2) struct{}
type _(type A, B, C C2 /* ERROR 3 type parameters */ ) struct{}

// Type instantiation must satisfy the contract.

type T1(type _, _ C2) struct{}

type A struct{}

func (A) a() {}

var _ T1(int /* ERROR does not satisfy */ , int)
var _ T1(A, int)

contract Stringer(T) {
        T String() string
}

type List(type T Stringer) struct{
        data T
        link *List(T)
}

var _ List(MyData)
var _ List(int /* ERROR does not satisfy */ )

type MyData string

func (s MyData) String() string { return string(s) }

// Contracts that mention types can only be satisfied by similar types.

contract C3(T) {
        T int16, int32, int, struct{x int}
}

type T2 (type _ C3) struct{}

var _ T2(int8 /* ERROR does not satisfy */ )
var _ T2(int16)
var _ T2(int32)
var _ T2(int64 /* ERROR does not satisfy */ )
var _ T2(int)
var _ T2(struct{x int})

// Use of contracts in parameterized functions

contract Ordered(T) {
        T int8, int16, int32, int64, int,
          uint8, uint16, uint32, uint64, uint,
          float32, float64, string, rune
}

func min(type T Ordered)(x, y T) T {
        if x < y {
                return x
        }
        return y
}

contract Integer(T) {
        T int8, int16, int32, int64, int,
          uint8, uint16, uint32, uint64, uint
}

func sum(type T Integer)(data []T) T {
        var s T
        for _, x := range data {
                s += x
        }
        return s
}

// Contracts and built-ins whose result type depends on the argument type.

contract FloatComplex(F, C) {
        F float32, float64
        C complex64, complex128
}

func _(type F, C FloatComplex)(c C) {
        _ = real(c)
        _ = imag(c)
        re := real(c)
        im := imag(c)
        var fre F = F(re)
        var fim F = F(im)
        c = C(complex(fre, fim))
}

// Use of instantiated contracts

contract Z() {}

contract _() {
        Z()
}

contract ABC(A, B, C) {
        A a()
        B b()
        C int, float64
}

func fa(type A, B, C) (A, B, C)
func fb(type A, B, C ABC) (A, B, C)
func fc(type A, B, C ABC(A, B, C)) (A, B, C)
func fd(type A, B, C ABC(B, C, A)) (A, B, C)

type tA int; func (tA) a()
type tB float64; func (tB) b()

func _() {
        var a tA
        var b tB
        fa(a, b, 0)
        fb(a, b, 0)
        fc(a, b, 0)
        fd(0, a, b)
        fd(int, tA, tB)(0, a, b)
        fd /* ERROR does not satisfy */ (a, b, 0) // TODO(gri) fix error position - should be with b
        fd(tA, tB /* ERROR does not satisfy */, int)(a, b, 0)
}

// --------------------------------------------------------------------------------------
// Parameterized interfaces as contracts

type Int interface {
        type int8, int16, int32, int64, int
        type uint8, uint16, uint32, uint64, uint
}

type Adder(type T) interface {
        Add(T) T
}

func adderSum(type T Adder(T))(data []T) T {
        var s T
        for _, x := range data {
                s = s.Add(x)
        }
        return s
}

func _(type T Adder /* ERROR cannot use generic type Adder */)(data []T) T

// --------------------------------------------------------------------------------------
// Type lists may contain type parameters... :-)

contract G1(T) { T T }
contract G2(T, T2) { T T, int; T2 T, int }

func g1 (type T G1) ()
func g2 (type T, T2 G2) ()

func h1 (type T interface{ type T }) ()
func h2 (type T, T2 interface{ type T, int }) ()

func _() {
	g1(int)()
	g1(string)()
	g2(int, int)()
	g2(int, string /* ERROR string does not satisfy */ )()

	h1(int)()
	h1(string)()
	h2(int, int)()
	h2(int, string /* ERROR string does not satisfy */ )()
}

// --------------------------------------------------------------------------------------
// Instantiations require bounds to be satisfied

type B1 interface{type int}

func f1(type P B1)(x P) {}

func _() {
	f1(string /* ERROR string not found */ )("foo")
        f1 /* ERROR string not found */ ("foo")
        f1 /* ERROR float64 not found */ (1.2)
        f1(42)
}

type T3(type P B1) P

func _(type P B1)(x T3(P))


type B2 interface{type int, string}

func _(type P B2)(x T3(P /* ERROR type constraint string not found in */ ))


contract B3(T) {
	T int, string
}

type T4(type P B1) P

func _(type P B3)(x T4(P /* ERROR type constraint string not found in */ ))

// --------------------------------------------------------------------------------------
// Type parameters may be from different parameterized objects

func f2(type P)(x P) P {
        type T(type Q) struct { x P; y Q }
        v := T(int){x, 42}
        return v.x
}

// TODO(gri) more complex examples such as this
