// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file contains regression tests for bugs found.

package p

import "io"

// This used to crash with an assertion failure when
// instantiating f(int, int). The assertion was checking
// that the number of type parameters and arguments was
// matching for the embedded contract anInt (rather, its
// corresponding interface bound) but it really compared
// the numbers for anInt and twoInt (which embedds anInt).
// The fix simply uses the instantiated non-parameterized
// underlying interface of atInt<K> rather than anInt<K>.
contract anInt(T) {
	T int
}

contract twoInt(K, _) {
	anInt(K)
}

func f(type K, V twoInt)()

func _ () {
	f(int, int)()
}

// This is the original (simplified) program causing the same issue.
contract onecomparable(T) {
	T int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64,
		string
}

contract twocomparable(K, V) {
	comparable(K) // predeclared contract comparable
	onecomparable(V)
}

func Equal(type K, V twocomparable)(m1, m2 map[K]V)

func _() {
	var m map[int]int
	Equal(m, nil)
}

// Interfaces are always comparable (though the comparison may panic at runtime).
func eql(type T comparable)(x, y T) bool {
	return x == y
}

func _() {
	var x interface{}
	var y interface{ m() }
	eql(x, y /* ERROR does not match */ ) // interfaces of different types
	eql(x, x)
	eql(y, y)
	eql(y, nil)
	eql(io.Reader)(nil, nil)
}

// If we have a receiver of pointer type (below: *T) we must ignore
// the pointer in the implementation of the method lookup because
// the type bound of T is an interface an pointer to interface types
// have no methods and then the lookup would fail.
contract C(T) {
    T m()
}

// using contract C
func _(type T C)(x *T) {
	x.m()
}

// using an interface as bound
func _(type T interface{ m() })(x *T) {
	x.m()
}

// This is the original (simplified) program causing the same issue.
type GraphP(type Node, Edge GP) struct {
	nodes []*Node
}

contract GP(Node, Edge) {
	Node Edges() []*Edge
}

func (g *GraphP(Node, Edge)) Edges(n *Node) []*Edge {
	return n.Edges()
}

// In a generic function body all method calls will be pointer method calls.
// If necessary, the function body will insert temporary variables, not seen
// by the user, in order to get an addressable variable to use to call the method.
// Thus, assume an argument type for a generic function to be the type of addressable
// values in the generic function when checking if the argument type satisfies the
// generic function's type bound.
func f2(type _ interface{ m1(); m2() })()

type T struct{}
func (T) m1()
func (*T) m2()

func _() {
	f2(T)()
	f2(*T)()
}

// This is the original (simplified) program causing the same issue.
func NewP(type Node, Edge GP)(nodes []*Node) *GraphP(Node, Edge) {
	return &GraphP(Node, Edge){nodes: nodes}
}

type N struct{}
func (n *N) Edges() []*E { return nil }
type E struct{}
func F() {
	_ = NewP(N, E)(nil)
}

// When a type parameter is used as an argument to instantiate a parameterized
// type with a type list constraint, all of the type argument's types in its
// bound, but at least one (!), must be in the type list of the bound of the
// corresponding parameterized type's type parameter.
type T1(type P interface{type uint}) struct{}

func _(type P)() {
    _ = T1(P /* ERROR P has no type constraints */ ){}
}

// This is the original (simplified) program causing the same issue.
contract Unsigned(T) {
	T uint
}

type T2(type U Unsigned) struct {
    s U
}

func (u T2(U)) Add1() U {
    return u.s + 1
}

func NewT2(type U)() T2(U /* ERROR U has no type constraints */ ) {
    return T2(U /* ERROR U has no type constraints */ ){}
}

func _() {
    u := NewT2(string)()
    _ = u.Add1()
}

// When we encounter an instantiated type such as Elem(T) we must
// not "expand" the instantiation when the type to be instantiated
// (Elem in this case) is not yet fully set up.
type Elem(type T) struct {
	next *Elem(T)
	list *List(T)
}

type List(type T) struct {
	root Elem(T)
}

func (l *List(T)) Init() {
	l.root.next = &l.root
}

// This is the original program causing the same issue.
type Element2(type TElem) struct {
	next, prev *Element2(TElem)
	list *List2(TElem)
	Value TElem
}

type List2(type TElem) struct {
	root Element2(TElem)
	len  int
}

func (l *List2(TElem)) Init() *List2(TElem) {
	l.root.next = &l.root
	l.root.prev = &l.root
	l.len = 0
	return l
}

// Self-recursive instantiations must work correctly.
type A(type P) struct { _ *A(P) }

type AB(type P) struct { _ *BA(P) }
type BA(type P) struct { _ *AB(P) }

// And a variation that also caused a problem with an
// unresolved underlying type.
type Element3(type TElem) struct {
	next, prev *Element3(TElem)
	list *List3(TElem)
	Value TElem
}

func (e *Element3(TElem)) Next() *Element3(TElem) {
	if p := e.next; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

type List3(type TElem) struct {
	root Element3(TElem)
	len  int
}

// Infinite generic type declarations must lead to an error.
type inf1(type T) struct{ _ inf1 /* ERROR illegal cycle */ (T) }
type inf2(type T) struct{ (inf2 /* ERROR illegal cycle */ (T)) }
