// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file shows examples of contract declarations.

package p

// A contract declaration, like any other declaration,
// starts with a keyword, followed by the contract name
// and the contract type parameters, and then the contract
// specification.
contract C(T) {
	T m()
}

// Contracts may be empty.
contract Empty() {}

// Contracts may be grouped.
contract (
	C1(T) {}
	C2(T) {}
	C3(T) {}
)

// A contract specifies methods and types for each of the
// type parameters it constrains.
contract Stringer(T) {
	T String() string
}

contract Sequence(T) {
	T string, []byte
}

// Contracts may not be declared locally. They are accepted
// for good syntax error recovery, but errors are reported.
func _() {
        contract /* ERROR "inside function" */ C() {}
        contract /* ERROR "inside function" */ C(T) {}
        contract /* ERROR "inside function" */ C(T) { C(T); T m(); T int }
}

// Contracts may constrain multiple type parameters
// in mutually recursive ways.
contract G(Node, Edge) {
	Node Edges() []Edge
	Edge Nodes() (from Node, to Node)
}

type Graph (type Node, Edge G) struct { /* ... */ }

func New (type Node, Edge G) (nodes []Node) *Graph(Node, Edge)

func (g *Graph(N, E)) ShortestPath(from, to N) []E

// Same Graph using interface bounds instead of a contract.

type AltGraph (type Node NodeFace(Edge), Edge EdgeFace(Node)) struct { }

func AltNew (type Node NodeFace(Edge), Edge EdgeFace(Node)) (nodes []Node) *AltGraph(Node, Edge)

func (g *AltGraph(N, E)) ShortestPath(from, to N) []E

type NodeFace(type Edge) interface {
	Edges() []Edge
}

type EdgeFace(type Node) interface {
	Nodes() (from, to Node)
}

// Contracts may embed other contracts.
// Parentheses are permitted (for symmetry with embedding in structs and interfaces)
// but never required.
contract _(T) {
	Stringer(T)
	(Sequence(T))

	Graph /* ERROR not a contract */ (T, T)
	( /* ERROR not a contract */ []int)
}

// The predeclared contract "comparable" describes all types
// that support == and != comparisons.
func cmp1(type T comparable)(x, y T) bool {
	var _ map[T]int // T is comparable so can use it as map key
	return x == y || x != y
}

func _() {
	_ = cmp1(int)
	_ = cmp1(float32)(1, 2)
	_ = cmp1(42, 53)
	_ = cmp1(struct{})
	_ = cmp1([ /* ERROR does not satisfy */ ]byte)
}

func cmp2(type T1 comparable, T2 comparable)(x1, y1 T1, x2, y2 T2) bool {
	return x1 == y1 || x2 != y2
}

contract compareTwo(A, B) {
	comparable(A)
	comparable(B)
}

func cmp3(type T1, T2 compareTwo)(x1, y1 T1, x2, y2 T2) bool {
	return x1 == y1 || x2 != y2
}
